{"name":"Samphp","tagline":"SAMPHP - Write SA-MP gamemodes in PHP","body":"SAMPHP - SA:MP Gamemode SDK for PHP\r\n======\r\n\r\nSAMPHP provides an API for developing SA:MP Gamemodes using the popular script language PHP.\r\n\r\nAll natives and official SA-MP callbacks are implemented.\r\nMost functions have the exact same syntax as their PAWN counterpart.\r\nEvery function, that uses reference-passing got changed and either returns an associated array containing the information or if it only returns one information, returns it directly.\r\n\r\nExamples\r\n===\r\nPAWN Example\r\n```pawn\r\npublic OnPlayerConnect(playerid)\r\n{\r\n    //Get the name of the player that connected and display a join message to other players\r\n \r\n    new name[MAX_PLAYER_NAME+1], string[24+MAX_PLAYER_NAME+1];\r\n    GetPlayerName(playerid, name, sizeof(name));\r\n \r\n    format(string, sizeof(string), \"%s has joined the server.\", name);\r\n    SendClientMessageToAll(0xC4C4C4FF, string);\r\n \r\n    return 1;\r\n}\r\n```\r\n\r\nSame code with SAMPHP\r\n```php\r\nfunction OnPlayerConnect($playerid)\r\n{\r\n    //Get the name of the player that connected and display a join message to other players\r\n    $playername = GetPlayerName($playerid);\r\n \r\n    SendClientMessageToAll(0xC4C4C4FF, \"$playername has joined the server.\");\r\n \r\n    return true;\r\n}\r\n```\r\n\r\nFramework\r\n===\r\nWe also created a very cool framework for SAMPHP, making it even more easier to write short and beautiful code.\r\nThe code above might look like the following:\r\n```php\r\nEvent::on('PlayerConnect', function($player)\r\n{\r\n    SendClientMessageToAll(0xC4C4C4FF, $player->getName().\" has joined the server.\");\r\n \r\n    return true;\r\n});\r\n```\r\n\r\nInstallation\r\n===\r\nPlease look here for installation instructions:\r\nhttp://forum.sa-mp.com/showthread.php?p=3264355\r\n\r\nCompiling: Linux\r\n===\r\n1. You need: libxml2-dev, gcc, g++ (x86 environment!)\r\n2. Clone the repository.\r\n3. Run ./install_libphp5.sh as root, this will install php headers and libphp5.so\r\n4. run ./build.sh and copy the created samphp file to your plugins folder\r\n\r\nCompiling on Windows:\r\n===\r\n1. Download visual studio 2013\r\n2. Clone the repository\r\n3. Download PHP source code\r\n4. Build the PHP source code with the parameters given in build-vs2013/php params windows.txt file.\r\n5. Updated visual studio project properties with the new PHP include directories and library directories.\r\n6. Clean up the project(If required) and Build it.\r\n7. Move the created samphp.dll file to your sa-mp server plugin folder(And configure the server to load from it)\r\n\r\nThanks to\r\n===\r\n- SA:MP Team for developing SA:MP\r\n- Zeex for developing the SAMPGDK which is used by SAMPHP\r\n- All the PHP Core developers\r\n- Lapayo(for creating this wrapper)\r\n\r\nSupport this project!\r\n===\r\nFeel free to support this project by donating over [paypal](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=AQKGQ8HNHKFYA)!\r\n\r\nContact the developer!\r\n===\r\nFeel free to contact the developer over [e-mail](mailto:crodriguespt96@gmail.com).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}